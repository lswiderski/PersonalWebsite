@using PersonalWebsite.Services.Models
@model Sakura.AspNetCore.IPagedList<SimplifiedPostViewModel>

@{
    Layout = "_Layout";
}
<script src="https://www.amcharts.com/lib/3/ammap.js"></script>
<script src="https://www.amcharts.com/lib/3/maps/js/worldLow.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
<style>
    #chartdiv {
  width: 100%;
  height: 500px;
}

.map-marker {
    /* adjusting for the marker dimensions
    so that it is centered on coordinates */
    margin-left: -8px;
    margin-top: -8px;
}
.map-marker.map-clickable {
    cursor: pointer;
}
.pulse {
    width: 10px;
    height: 10px;
    border: 5px solid #f7f14c;
    -webkit-border-radius: 30px;
    -moz-border-radius: 30px;
    border-radius: 30px;
    background-color: #716f42;
    z-index: 10;
    position: absolute;
  }
.map-marker .dot {
    border: 10px solid #fff601;
    background: transparent;
    -webkit-border-radius: 60px;
    -moz-border-radius: 60px;
    border-radius: 60px;
    height: 50px;
    width: 50px;
    -webkit-animation: pulse 3s ease-out;
    -moz-animation: pulse 3s ease-out;
    animation: pulse 3s ease-out;
    -webkit-animation-iteration-count: infinite;
    -moz-animation-iteration-count: infinite;
    animation-iteration-count: infinite;
    position: absolute;
    top: -20px;
    left: -20px;
    z-index: 1;
    opacity: 0;
  }
  @@-moz-keyframes pulse {
   0% {
      -moz-transform: scale(0);
      opacity: 0.0;
   }
   25% {
      -moz-transform: scale(0);
      opacity: 0.1;
   }
   50% {
      -moz-transform: scale(0.1);
      opacity: 0.3;
   }
   75% {
      -moz-transform: scale(0.5);
      opacity: 0.5;
   }
   100% {
      -moz-transform: scale(1);
      opacity: 0.0;
   }
  }
  @@-webkit-keyframes "pulse" {
   0% {
      -webkit-transform: scale(0);
      opacity: 0.0;
   }
   25% {
      -webkit-transform: scale(0);
      opacity: 0.1;
   }
   50% {
      -webkit-transform: scale(0.1);
      opacity: 0.3;
   }
   75% {
      -webkit-transform: scale(0.5);
      opacity: 0.5;
   }
   100% {
      -webkit-transform: scale(1);
      opacity: 0.0;
   }
  }
</style>
<div class="full-width-img"></div>
<div class="container">
    <div class="row">
        <div class="card card-block blog-nav">
            <div id="chartdiv"></div>
        </div>
        <div class="col-md-8 blog-list">
            <div id="Post-List">

                @foreach (var post in Model)
                {
                    <div class="post-item-box card">
                        @if (!string.IsNullOrEmpty(post.ImgURL))
                        {<a href='@Url.Action("Blog","Home", new {id = @post.Name })'>
                            <img class="card-img-top img-fluid" src="@Url.Content("~/"+post.ImgURL)" alt="@post.Name ">
                        </a>
                        }
                        <div class="card-block">
                            <span><h4 class="card-title post-item-box-tittle"><a href='@Url.Action("Blog","Home", new {id = @post.Name })'>@post.Title</a></h4></span>
                            <h6 class="card-subtitle post-item-subtitle">
                                <i class="fa fa-user" aria-hidden="true"></i>
                                Łukasz Świderski
                                <i class="fa fa-folder-open" aria-hidden="true"></i>
                                @foreach (var category in post.Categories)
                                {
                                    <a asp-controller="Home" asp-action="Category" asp-route-id="@category.Name">@category.Tittle </a>
                                }
                                <i class="fa fa-tags" aria-hidden="true"></i>
                                @foreach (var tag in post.Tags)
                                {
                                    <a asp-controller="Home" asp-action="Tag" asp-route-id="@tag.Name">#@tag.Name </a>
                                }
                                @if (post.PublishedOn.HasValue)
                                {
                                    <span class="post-item-data">
                                        <i class="fa fa-clock-o" aria-hidden="true"></i>

                                        @post.PublishedOn.Value.ToString("dd MMM yyyy")

                                    </span>
                                }
                            </h6>

                            <p class="card-text ">@post.Excerpt</p>
                            <div class="text-xs-right">
                                <div class="show-more card-link">
                                    <a href='@Url.Action("Blog","Home", new {id = @post.Name })'>Show more...</a>
                                </div>
                            </div>


                        </div>
                    </div>
                }
            </div>

            <nav aria-label="Page navigation">
                <pager setting-item-attr-class="page-item" setting-link-attr-class="page-link" />
            </nav>

        </div>
        <div class="col-md-4 blog-sidebar">
            <div class="row">
                <div class="card card-block">
                    @await Component.InvokeAsync("CategoryList")
                </div>
            </div>
            <div class="row">
                <div class="card card-block">
                    @await Component.InvokeAsync("Tags")
                </div>
            </div>
            <div class="row">
                <div class="card">

                    <div class="card-block">
                        @await Component.InvokeAsync("InstagramComponent")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="card">
                    <div class="card-block">
                        @await Component.InvokeAsync("TwitterComponent")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>


   

   
</script>
@section Scripts {
    <script>
        
        
        
        $(document)
            .ready(function() {
                function getMapData() {
                    $.ajax({
                        url: '@Url.Action("AdventuresForMap", "Home")',
                        type: 'GET',

                        success: function(data) {
                            map.dataProvider.images = data;
                            map.validateData();
                           
                        },
                    });
                }
                /**
    * This example uses pulsating circles CSS by Kevin Urrutia
    * http://kevinurrutia.tumblr.com/post/16411271583/creating-a-css3-pulsating-circle
    */
                var mapData = {
                    "type": "map",
                    "theme": "light",
                    "projection": "miller",
                    "mouseWheelZoomEnabled": true,

                    "imagesSettings": {
                        "rollOverColor": "#089282",
                        "rollOverScale": 3,
                        "selectedScale": 3,
                        "selectedColor": "#089282",
                        "color": "#13564e"
                    },

                    "areasSettings": {
                        "unlistedAreasColor": "#15A892"
                    },

                    "dataProvider": {
                        "map": "worldLow",
                        "images": []
                    }
                };
                var map = AmCharts.makeChart("chartdiv", mapData);
                map.addListener("positionChanged", updateCustomMarkers);
                getMapData();
                // add events to recalculate map position when the map is moved or zoomed
                
                // this function will take current images on the map and create HTML elements for them
                function updateCustomMarkers(event) {
                    // get map object
                    var map = event.chart;

                    // go through all of the images
                    for (var x in map.dataProvider.images) {
                        // get MapImage object
                        var image = map.dataProvider.images[x];

                        // check if it has corresponding HTML element
                        if ('undefined' == typeof image.externalElement)
                            image.externalElement = createCustomMarker(image);

                        // reposition the element accoridng to coordinates
                        var xy = map.coordinatesToStageXY(image.longitude, image.latitude);
                        image.externalElement.style.top = xy.y + 'px';
                        image.externalElement.style.left = xy.x + 'px';
                    };
                    $('[data-toggle="map-tooltip"]').tooltip({ html: true });
                }

                // this function creates and returns a new marker element
                function createCustomMarker(image) {
                    // create holder
                    var holder = document.createElement('div');
                    holder.className = 'map-marker';
                    holder.title = image.title;
                    holder.style.position = 'absolute';
                    holder.setAttribute('data-toggle', 'map-tooltip');
                    holder.setAttribute('title', image.customData);

                    if (undefined != image.advId) {
                        holder.setAttribute('data-adv-id', image.advId);
                    }


                    // maybe add a link to it?
                    if (undefined != image.url) {
                        holder.onclick = function() {
                            window.location.href = image.url;
                        };
                        holder.className += ' map-clickable';
                    }

                    // create dot
                    var dot = document.createElement('div');
                    dot.className = 'dot';
                    holder.appendChild(dot);

                    // create pulse
                    var pulse = document.createElement('div');
                    pulse.className = 'pulse';
                    holder.appendChild(pulse);

                    // append the marker to the map container
                    image.chart.chartDiv.appendChild(holder);

                    return holder;
                }
            });
    </script>


}